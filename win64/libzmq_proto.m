function [methodinfo,structs,enuminfo,ThunkLibName]=zmq
%ZMQ Create structures to define interfaces found in 'zmq'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Thu Apr 11 21:41:49 2013
%perl options:'zmq.i -outfile=zmq.m -thunkfile=libzmq0x2Dv1000x2Dmt0x2D3_2_2_thunk_pcwin64.c -header=zmq.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'libzmq0x2Dv1000x2Dmt0x2D3_2_2_thunk_pcwin64');
%  void zmq_version ( int * major , int * minor , int * patch ); 
fcns.thunkname{fcnNum}='voidvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_version'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'int32Ptr', 'int32Ptr', 'int32Ptr'};fcnNum=fcnNum+1;
%  int zmq_errno ( void ); 
fcns.thunkname{fcnNum}='int32voidThunk';fcns.name{fcnNum}='zmq_errno'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  const char * zmq_strerror ( int errnum ); 
fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='zmq_strerror'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  void * zmq_ctx_new ( void ); 
fcns.thunkname{fcnNum}='voidPtrvoidThunk';fcns.name{fcnNum}='zmq_ctx_new'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}=[];fcnNum=fcnNum+1;
%  int zmq_ctx_destroy ( void * context ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_ctx_destroy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int zmq_ctx_set ( void * context , int option , int optval ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='zmq_ctx_set'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  int zmq_ctx_get ( void * context , int option ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='zmq_ctx_get'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  void * zmq_init ( int io_threads ); 
fcns.thunkname{fcnNum}='voidPtrint32Thunk';fcns.name{fcnNum}='zmq_init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
%  int zmq_term ( void * context ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_term'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_init ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_msg_init'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_init_size ( zmq_msg_t * msg , size_t size ); 
fcns.thunkname{fcnNum}='int32voidPtruint64Thunk';fcns.name{fcnNum}='zmq_msg_init_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'uint64'};fcnNum=fcnNum+1;
%  int zmq_msg_send ( zmq_msg_t * msg , void * s , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_msg_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_msg_recv ( zmq_msg_t * msg , void * s , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_msg_recv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_msg_close ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_msg_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_move ( zmq_msg_t * dest , zmq_msg_t * src ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_msg_move'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_copy ( zmq_msg_t * dest , zmq_msg_t * src ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_msg_copy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  void * zmq_msg_data ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_msg_data'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  size_t zmq_msg_size ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='uint64voidPtrThunk';fcns.name{fcnNum}='zmq_msg_size'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='uint64'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_more ( zmq_msg_t * msg ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_msg_more'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr'};fcnNum=fcnNum+1;
%  int zmq_msg_get ( zmq_msg_t * msg , int option ); 
fcns.thunkname{fcnNum}='int32voidPtrint32Thunk';fcns.name{fcnNum}='zmq_msg_get'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_msg_set ( zmq_msg_t * msg , int option , int optval ); 
fcns.thunkname{fcnNum}='int32voidPtrint32int32Thunk';fcns.name{fcnNum}='zmq_msg_set'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_msg_tPtr', 'int32', 'int32'};fcnNum=fcnNum+1;
%  void * zmq_socket ( void *, int type ); 
fcns.thunkname{fcnNum}='voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_socket'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='voidPtr'; fcns.RHS{fcnNum}={'voidPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_close ( void * s ); 
fcns.thunkname{fcnNum}='int32voidPtrThunk';fcns.name{fcnNum}='zmq_close'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
%  int zmq_setsockopt ( void * s , int option , const void * optval , size_t optvallen ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtruint64Thunk';fcns.name{fcnNum}='zmq_setsockopt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
%  int zmq_getsockopt ( void * s , int option , void * optval , size_t * optvallen ); 
fcns.thunkname{fcnNum}='int32voidPtrint32voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_getsockopt'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'int32', 'voidPtr', 'uint64Ptr'};fcnNum=fcnNum+1;
%  int zmq_bind ( void * s , const char * addr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='zmq_bind'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int zmq_connect ( void * s , const char * addr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='zmq_connect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int zmq_unbind ( void * s , const char * addr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='zmq_unbind'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int zmq_disconnect ( void * s , const char * addr ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringThunk';fcns.name{fcnNum}='zmq_disconnect'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring'};fcnNum=fcnNum+1;
%  int zmq_send ( void * s , const void * buf , size_t len , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64int32Thunk';fcns.name{fcnNum}='zmq_send'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'int32'};fcnNum=fcnNum+1;
%  int zmq_recv ( void * s , void * buf , size_t len , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64int32Thunk';fcns.name{fcnNum}='zmq_recv'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'uint64', 'int32'};fcnNum=fcnNum+1;
%  int zmq_socket_monitor ( void * s , const char * addr , int events ); 
fcns.thunkname{fcnNum}='int32voidPtrcstringint32Thunk';fcns.name{fcnNum}='zmq_socket_monitor'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'cstring', 'int32'};fcnNum=fcnNum+1;
%  int zmq_sendmsg ( void * s , zmq_msg_t * msg , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_sendmsg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'zmq_msg_tPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_recvmsg ( void * s , zmq_msg_t * msg , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_recvmsg'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'zmq_msg_tPtr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_sendiov ( void * s , struct iovec * iov , size_t count , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtruint64int32Thunk';fcns.name{fcnNum}='zmq_sendiov'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'iovecPtr', 'uint64', 'int32'};fcnNum=fcnNum+1;
%  int zmq_recviov ( void * s , struct iovec * iov , size_t * count , int flags ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrint32Thunk';fcns.name{fcnNum}='zmq_recviov'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'iovecPtr', 'uint64Ptr', 'int32'};fcnNum=fcnNum+1;
%  int zmq_poll ( zmq_pollitem_t * items , int nitems , long timeout ); 
fcns.thunkname{fcnNum}='int32voidPtrint32longThunk';fcns.name{fcnNum}='zmq_poll'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'zmq_pollitem_tPtr', 'int32', 'long'};fcnNum=fcnNum+1;
%  int zmq_proxy ( void * frontend , void * backend , void * capture ); 
fcns.thunkname{fcnNum}='int32voidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_proxy'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'voidPtr', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
%  int zmq_device ( int type , void * frontend , void * backend ); 
fcns.thunkname{fcnNum}='int32int32voidPtrvoidPtrThunk';fcns.name{fcnNum}='zmq_device'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int32', 'voidPtr', 'voidPtr'};fcnNum=fcnNum+1;
structs.zmq_msg_t.members=struct('m_', 'uint8#32');
structs.iovec.members=struct('');
structs.zmq_pollitem_t.members=struct('socket', 'voidPtr', 'fd', 'uint64', 'events', 'int16', 'revents', 'int16');
methodinfo=fcns;